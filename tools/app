#!/bin/bash

set -Eu

PN="${BASH_SOURCE[0]##*/}"
PD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
typebinray="binary"
typetarball="tarball"
typezip="zip"
typeplugin="plugin"
applist=()

function usage() {
	cat <<EOF
Usage: ${PN} [Options] <APPLICAION>
Options:
  -h    : show this help message

Application:
  $(list_application)
EOF
	[[ $# -gt 0 ]] && { echo ; echo "$@" ; exit 1 ; } || exit 0
}

function install_application() {
	local application="${1//,/}"
	local appfunc="$(get_application_function "${application}")"
	local apptype version url tarpath localpath tmpdir

	[[ -z "${appfunc}" ]] && usage "Unknown application: '${application}'"

	read -d "\n" apptype version url tarpath <<< "$(${appfunc})"

	case "${apptype}" in
	"${typebinray}")
		[[ -z "${url}" ]] && echo "Empty application url: '${application}'" && exit 1
		if [[ ! -d "${HOME}/bin" ]]; then
			mkdir -p "${HOME}/bin"
		fi
		localpath="${HOME}/bin/${application}-${version}"

		if [[ -x "${localpath}" ]]; then
			echo "Installed ${application}-${version}"
		else
			echo "Downloading ${application}-${version} ..."
			curl -L "${url}" -o "${localpath}"
			chmod +x "${localpath}"
			pushd "${HOME}/bin" >/dev/null
			ln -sf "${application}-${version}" "${application}"
			popd >/dev/null
		fi
		;;
	"${typetarball}")
		[[ -z "${url}" ]] && echo "Empty application url: '${application}'" && exit 1
		[[ -z "${tarpath}" ]] && echo "Empty application tarball path: '${application}'" && exit 1
		if [[ ! -d "${HOME}/bin" ]]; then
			mkdir -p "${HOME}/bin"
		fi
		localpath="${HOME}/bin/${application}-${version}"
		tmpdir="/tmp/my-shell-tmp-$$"

		if [[ -x "${localpath}" ]]; then
			echo "Installed ${application}-${version}"
		else
			echo "Downloading ${application}-${version} ..."
			mkdir -p "${tmpdir}"
			curl -L "${url}" -o "${tmpdir}/download-${application}-${version}"
			tar xf "${tmpdir}/download-${application}-${version}" -C "${tmpdir}"
			mv "${tmpdir}/${tarpath}" "${localpath}"
			rm -rf "${tmpdir}"
			pushd "${HOME}/bin" >/dev/null
			ln -sf "${application}-${version}" "${application}"
			popd >/dev/null
		fi
		;;
	"${typezip}")
		[[ -z "${url}" ]] && echo "Empty application url: '${application}'" && exit 1
		[[ -z "${tarpath}" ]] && echo "Empty application tarball path: '${application}'" && exit 1
		if [[ ! -d "${HOME}/bin" ]]; then
			mkdir -p "${HOME}/bin"
		fi
		localpath="${HOME}/bin/${application}-${version}"
		tmpdir="/tmp/my-shell-tmp-$$"

		if [[ -x "${localpath}" ]]; then
			echo "Installed ${application}-${version}"
		else
			echo "Downloading ${application}-${version} ..."
			mkdir -p "${tmpdir}"
			curl -L "${url}" -o "${tmpdir}/download-${application}-${version}"
			pushd "${tmpdir}" >/dev/null
			unzip -x "${tmpdir}/download-${application}-${version}"
			mv "${tmpdir}/${tarpath}" "${localpath}"
			popd >/dev/null
			rm -rf "${tmpdir}"
			pushd "${HOME}/bin" >/dev/null
			ln -sf "${application}-${version}" "${application}"
			popd >/dev/null
		fi
		;;
	"${typeplugin}")
		[[ -z "${url}" ]] && echo "Empty application url: '${application}'" && exit 1
		[[ -z "${MYSHELL}" ]] && echo "Empty MYSHELL environment variable" && exit 1
		if [[ ! -d "${MYSHELL}/plugins" ]]; then
			mkdir -p "${MYSHELL}/plugins"
		fi
		curl -L "${url}" -o "${MYSHELL}/plugins/${application}"
		;;
	*) usage "Unknown application type: '${apptype}'" ;;
	esac
}

function list_application() {
	local list=() app loopname loopfunc
	for app in "${applist[@]}"; do
		read loopname loopfunc <<< "${app}" || true
		list+=(${loopname})
	done
	echo "${list[@]}"
}

function get_application_function() {
	local name="${1}" app loopname loopfunc
	for app in "${applist[@]}"; do
		read loopname loopfunc <<< "${app}" || true
		if [[ "${name}" == "${loopname}" ]]; then
			echo "${loopfunc}"
			return 0
		fi
	done
}

applist+=('direnv direnv_info')
function direnv_info() {
	local tag os
	tag="$(curl https://github.com/direnv/direnv/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typebinray}"
	echo "${tag#v}"
	echo "https://github.com/direnv/direnv/releases/download/${tag}/direnv.${os}-amd64"
}

applist+=('docker-compose docker_compose_info')
function docker_compose_info() {
	local tag os machine
	tag="$(curl https://github.com/docker/compose/releases/latest -sL | grep -oE "tag/[v0-9.]+" | head -n 1 | cut -c 5-)"
	os="$(uname -s)"
	machine="$(uname -m)"
	echo "${typebinray}"
	echo "${tag#v}"
	echo "https://github.com/docker/compose/releases/download/${tag}/docker-compose-${os}-${machine}"
}

applist+=('etcdctl etcdctl_info')
function etcdctl_info() {
	local tag os typ url
	tag="$(curl https://github.com/etcd-io/etcd/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
		typ="${typezip}"
		url="https://github.com/etcd-io/etcd/releases/download/${tag}/etcd-${tag}-${os}-amd64.zip"
	else
		os="linux"
		typ="${typetarball}"
		url="https://github.com/etcd-io/etcd/releases/download/${tag}/etcd-${tag}-${os}-amd64.tar.gz"
	fi
	echo "${typ}"
	echo "${tag#v}"
	echo "${url}"
	echo "etcd-${tag}-${os}-amd64/etcdctl"
}

applist+=('golangci-lint golangci_lint_info')
function golangci_lint_info() {
	local tag os
	tag="$(curl https://github.com/golangci/golangci-lint/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 6-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typetarball}"
	echo "${tag#v}"
	echo "https://github.com/golangci/golangci-lint/releases/download/v${tag#v}/golangci-lint-${tag#v}-${os}-amd64.tar.gz"
	echo "golangci-lint-${tag#v}-${os}-amd64/golangci-lint"
}

applist+=('hadolint hadolint_info')
function hadolint_info() {
	local tag os
	tag="$(curl https://github.com/hadolint/hadolint/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="Darwin"
	else
		os="Linux"
	fi
	echo "${typebinray}"
	echo "${tag#v}"
	echo "https://github.com/hadolint/hadolint/releases/download/${tag}/hadolint-${os}-x86_64"
}

applist+=('helm helm_info')
function helm_info() {
	local tag os
	tag="$(curl https://github.com/helm/helm/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typetarball}"
	echo "${tag#v}"
	echo "https://get.helm.sh/helm-${tag}-${os}-amd64.tar.gz"
	echo "${os}-amd64/helm"
}

applist+=('jq jq_info')
function jq_info() {
	local tag os
	tag="$(curl https://github.com/stedolan/jq/releases/latest -s | grep -oE "tag/jq-[v0-9.]+" | cut -c 8-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="osx-amd64"
	else
		os="linux64"
	fi
	echo "${typebinray}"
	echo "${tag#v}"
	echo "https://github.com/stedolan/jq/releases/download/jq-${tag}/jq-${os}"
}

applist+=('k9s k9s_info')
function k9s_info() {
	local tag os
	tag="$(curl https://github.com/derailed/k9s/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 6-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="Darwin"
	else
		os="Linux"
	fi
	echo "${typetarball}"
	echo "${tag#v}"
	echo "https://github.com/derailed/k9s/releases/download/v${tag#v}/k9s_${os}_x86_64.tar.gz"
	echo "k9s"
}

applist+=('kube-ps1 kube_ps1_info')
function kube_ps1_info() {
	local tag="master"
	echo "${typeplugin}"
	echo "${tag}"
	echo "https://raw.githubusercontent.com/jonmosco/kube-ps1/${tag}/kube-ps1.sh"
}

applist+=('kubectl kubectl_info')
function kubectl_info() {
	local tag os
	tag="$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typebinray}"
	echo "${tag#v}"
	echo "https://storage.googleapis.com/kubernetes-release/release/${tag}/bin/${os}/amd64/kubectl"
}

applist+=('lazydocker lazydocker_info')
function lazydocker_info() {
	local tag os
	tag="$(curl https://github.com/jesseduffield/lazydocker/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="Darwin"
	else
		os="Linux"
	fi
	echo "${typetarball}"
	echo "${tag#v}"
	echo "https://github.com/jesseduffield/lazydocker/releases/download/${tag}/lazydocker_${tag#v}_${os}_x86_64.tar.gz"
	echo "lazydocker"
}

applist+=('rke rke_info')
function rke_info() {
	local tag os
	tag="$(curl https://github.com/rancher/rke/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typebinray}"
	echo "${tag#v}"
	echo "https://github.com/rancher/rke/releases/download/${tag}/rke_${os}-amd64"
}

applist+=('terraform terraform_info')
function terraform_info() {
	local tag os
	tag="$(curl https://releases.hashicorp.com/terraform/ -s | grep -oE ">terraform_[^<>]+" | head -n 1 | cut -c 12-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typezip}"
	echo "${tag}"
	echo "https://releases.hashicorp.com/terraform/${tag}/terraform_${tag}_${os}_amd64.zip"
	echo "terraform"
}

applist+=('yq yq_info')
function yq_info() {
	local tag os
	tag="$(curl https://github.com/mikefarah/yq/releases/latest -s | grep -oE "tag/[v0-9.]+" | cut -c 5-)"
	if [[ "$(uname)" == "Darwin" ]]; then
		os="darwin"
	else
		os="linux"
	fi
	echo "${typebinray}"
	echo "${tag}"
	echo "https://github.com/mikefarah/yq/releases/download/${tag}/yq_${os}_amd64"
}

function main() {
	local application
	for application in "$@"; do
		install_application "${application}"
	done
}

while getopts "h" opt; do
	case "${opt}" in
	h) usage ;;
	esac
done

[[ $# -eq 0 ]] && usage

main "$@"
